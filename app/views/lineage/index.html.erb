<header>
  <div class="header_left">
    <h1><%= t('.visual_data_lineage')%></h1>
  </div>
  <div class="header_right">
    <ul class="flat_list">
      <li><%= link_to t('.reset'), lineages_index_path(:do => :reset), :class => 'button' %></li>
    </ul>
  </div>
</header>

<div id="lineage-container"></div>

<script type="text/javascript">
  var redraw;
  var height = 500;
  var width = $("#lineage-container").width();

  window.onload = function () {
      var g = new Graph();

      var pseudo_node_render = function(r, n) {
          var set = r.set();
          set.push(r.rect(n.point[0], n.point[1],1,1)).attr({"stroke-width":0, "fill":"#fff"});
          return set;
      };

      var poem_node_render = function(r, n) {
          /* the Raphael set is obligatory, containing all you want to display */
          var set = r.set();

          var basic_shape = r.rect(n.point[0], n.point[1], 100, 30);
          basic_shape.attr({"stroke-width":2});
          set.push(basic_shape);

          var label_text = r.text(n.point[0]+50, n.point[1]+15, n.label);
          set.push(label_text);

          /* in connector */
          if(n.in_label != '') {
            var in_connector = r.circle(n.point[0]-15, n.point[1]+15, 10);
            in_connector.attr({"stroke-width":2});
            var in_connector_text = r.text(n.point[0]-15, n.point[1]+15, n.in_label);
            in_connector_text.attr({"href": n.in_url});
            set.push(in_connector);
            set.push(in_connector_text);
          };

          /* out connector */
          if(n.out_label != '') {
            var out_connector = r.circle(n.point[0]+115, n.point[1]+15, 10);
            out_connector.attr({"stroke-width":2});
            var out_connector_text = r.text(n.point[0]+115, n.point[1]+15, n.out_label);
            out_connector_text.attr({"href": n.out_url});
            set.push(out_connector);
            set.push(out_connector_text);
          };

          var action;
          action = r.rect(n.point[0], n.point[1]+35, 100, 5);
          action.attr({"stroke-width":0, "fill":"#fb4904", "href": n.poem_url});
          set.push(action);
          action = r.rect(n.point[0], n.point[1]-10, 100, 5);
          action.attr({"stroke-width":0, "fill":"#fb4904", "href": n.poem_url});
          set.push(action);

          return set;
      };

      <% @result['nodes'].each do |node| %>
        g.addNode("<%= node['poem'].id %>", {
            label:"<%= node['poem'].to_s %>",
            render:poem_node_render,
            poem_url:"<%= url_for poem_path(node['poem'])%>",
            <% if node['in'] == 'missing' %>
              in_label:'',
            <% end %>
            <% if node['in'] == 'closed' %>
              in_label:'+',
              in_url:"<%= url_for lineages_index_path({'dir' => 'in', 'do' => 'expand', 'poem_id' => node['poem'].id}) %>",
            <% end %>
            <% if node['in'] == 'more' %>
              in_label:'o',
              in_url:"<%= url_for lineages_index_path({'dir' => 'in', 'do' => 'expand', 'poem_id' => node['poem'].id}) %>",
            <% end %>
            <% if node['in'] == 'open' %>
              in_label:'-',
              in_url:"<%= url_for lineages_index_path({'dir' => 'in', 'do' => 'collapse', 'poem_id' => node['poem'].id}) %>",
            <% end %>
            <% if node['out'] == 'missing' %>
              out_label:'',
            <% end %>
            <% if node['out'] == 'closed' %>
              out_label:'+',
              out_url:"<%= url_for lineages_index_path({'dir' => 'out', 'do' => 'expand', 'poem_id' => node['poem'].id}) %>",
            <% end %>
            <% if node['out'] == 'more' %>
              out_label:'o',
              out_url:"<%= url_for lineages_index_path({'dir' => 'out', 'do' => 'expand', 'poem_id' => node['poem'].id}) %>",
            <% end %>
            <% if node['out'] == 'open' %>
              out_label:'-',
              out_url:"<%= url_for lineages_index_path({'dir' => 'out', 'do' => 'collapse', 'poem_id' => node['poem'].id}) %>",
            <% end %>
        });
      <% end %>
      <% if @result['nodes'].length == 1 %>
        /* add pseudo node */
        g.addNode('pseudo',{render:pseudo_node_render});
      <% end %>

      <% @result['edges'].each do |edge| %>
        g.addEdge("<%= edge.from_id %>", "<%= edge.to_id %>", {directed:true, label:"<%= edge.to_s %>"});
      <% end %>

      var layouter = new Graph.Layout.Ordered(g, topological_sort(g));
      layouter.layout();

      var renderer = new Graph.Renderer.Raphael('lineage-container', g, width, height);
      renderer.draw();

      redraw = function() {
          layouter.layout();
          renderer.draw();
      }
  }
</script>